name: Test all Packages

# run on all PRs (even the ones that target other branches)

on:
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# set ESM_DISABLE_CACHE=true (will be JSON parsed)
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['14.x', '16.x']
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
      - uses: ./.github/actions/build-node
        with:
          node-version: ${{ matrix.node-version }}

  lint:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/restore-node
        with:
          node-version: '14.x'

      - name: lint check
        run: yarn lint

  ##################
  # Fast-running tests run as a group:
  test-quick:
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        engine: ['14.x', '16.x', 'xs']
    steps:
      - name: set vars
        id: vars
        run: |
          echo ::set-output name=node-version::${{ matrix.engine == 'xs' && '14.x' || matrix.engine }}
          echo ::set-output name=test::${{ matrix.engine == 'xs' && 'test:xs' || 'test' }}
      - uses: actions/checkout@v2
      - uses: ./.github/actions/restore-node
        with:
          node-version: ${{ steps.vars.outputs.node-version }}
      # END-TEST-BOILERPLATE

      # We run separate steps for each package, to make it easier to drill down
      # into errors. If we wanted to just run everything, run 'yarn test' from
      # the top level.
      #
      # This list should include all packages, except ones that are in another
      #  category here, or that don't have a package.json.
      #- name: yarn test (everything)
      #  run: yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (access-token)
        run: cd packages/access-token && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (agoric-cli)
        run: cd packages/agoric-cli && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (assert)
        run: cd packages/assert && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (wallet/api)
        run: cd packages/wallet/api && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (deployment)
        run: cd packages/deployment && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (ERTP)
        run: cd packages/ERTP && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (governance)
        run: cd packages/governance && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (import-manager)
        run: cd packages/import-manager && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (notifier)
        run: cd packages/notifier && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (same-structure)
        run: cd packages/same-structure && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (sharing-service)
        run: cd packages/sharing-service && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (sparse-ints)
        run: cd packages/sparse-ints && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (spawner)
        run: cd packages/spawner && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (stat-logger)
        run: cd packages/stat-logger && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (store)
        run: cd packages/store && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (swing-store)
        run: cd packages/swing-store && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (web-components)
        run: cd packages/web-components && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (wallet-connection)
        run: cd packages/wallet-connection && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (publish-bundle)
        run: cd packages/publish-bundle && yarn ${{ steps.vars.outputs.test }}

  test-quick2:
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        engine: ['14.x', '16.x', 'xs']
    steps:
      - name: set vars
        id: vars
        run: |
          echo ::set-output name=node-version::${{ matrix.engine == 'xs' && '14.x' || matrix.engine }}
          echo ::set-output name=test::${{ matrix.engine == 'xs' && 'test:xs' || 'test' }}
      - uses: actions/checkout@v2
      - uses: ./.github/actions/restore-node
        with:
          node-version: ${{ steps.vars.outputs.node-version }}
      # END-TEST-BOILERPLATE
      - name: yarn test (cosmos)
        run: cd golang/cosmos && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (run-protocol)
        run: cd packages/run-protocol && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (pegasus)
        run: cd packages/pegasus && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (vats)
        run: cd packages/vats && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (swingset-runner)
        run: cd packages/swingset-runner && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (telemetry)
        run: cd packages/telemetry && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (deploy-script-support)
        run: cd packages/deploy-script-support && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (ui-components)
        run: cd packages/ui-components && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (wallet/ui)
        run: cd packages/wallet/ui && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (wallet)
        run: cd packages/wallet && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (eslint-config)
        run: cd packages/eslint-config && yarn ${{ steps.vars.outputs.test }}
      - name: yarn test (vat-data)
        run: cd packages/vat-data && yarn ${{ steps.vars.outputs.test }}

        # The meta-test!
      - name: Check for untested packages
        run: node ./scripts/check-untested-packages.mjs

  ##############
  # Long-running tests are executed individually.
  test-solo:
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        engine: ['14.x', '16.x', 'xs']
    steps:
      - name: set vars
        id: vars
        run: |
          echo ::set-output name=node-version::${{ matrix.engine == 'xs' && '14.x' || matrix.engine }}
          echo ::set-output name=test::${{ matrix.engine == 'xs' && 'test:xs' || 'test' }}
      - uses: actions/checkout@v2
      - uses: ./.github/actions/restore-node
        with:
          node-version: ${{ steps.vars.outputs.node-version }}
      # END-TEST-BOILERPLATE
      - name: yarn test (solo)
        timeout-minutes: 20
        run: cd packages/solo && yarn ${{ steps.vars.outputs.test }}

  test-cosmic-swingset:
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        engine: ['14.x', '16.x', 'xs']
    steps:
      - name: set vars
        id: vars
        run: |
          echo ::set-output name=node-version::${{ matrix.engine == 'xs' && '14.x' || matrix.engine }}
          echo ::set-output name=test::${{ matrix.engine == 'xs' && 'test:xs' || 'test' }}
      - uses: actions/checkout@v2
      - uses: ./.github/actions/restore-node
        with:
          node-version: ${{ steps.vars.outputs.node-version }}
      # END-TEST-BOILERPLATE
      - uses: ./.github/actions/restore-golang
        with:
          go-version: 1.17
      - name: yarn test (cosmic-swingset)
        run: cd packages/cosmic-swingset && yarn ${{ steps.vars.outputs.test }}

  # The test-swingset* tests are split by alphabetical test name.
  test-swingset:
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        engine: ['14.x', '16.x', 'xs']
    steps:
      - name: set vars
        id: vars
        run: |
          echo ::set-output name=node-version::${{ matrix.engine == 'xs' && '14.x' || matrix.engine }}
          echo ::set-output name=test::${{ matrix.engine == 'xs' && 'test:xs' || 'test' }}
      - uses: actions/checkout@v2
      - uses: ./.github/actions/restore-node
        with:
          node-version: ${{ steps.vars.outputs.node-version }}
      # END-TEST-BOILERPLATE
      - name: yarn test (SwingSet)
        run: cd packages/SwingSet && yarn ${{ steps.vars.outputs.test }} 'test/**/test-[A-Da-d]*.js'

  test-swingset2:
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        engine: ['14.x', '16.x', 'xs']
    steps:
      - name: set vars
        id: vars
        run: |
          echo ::set-output name=node-version::${{ matrix.engine == 'xs' && '14.x' || matrix.engine }}
          echo ::set-output name=test::${{ matrix.engine == 'xs' && 'test:xs' || 'test' }}
      - uses: actions/checkout@v2
      - uses: ./.github/actions/restore-node
        with:
          node-version: ${{ steps.vars.outputs.node-version }}
      # END-TEST-BOILERPLATE
      - name: yarn test (SwingSet)
        run: cd packages/SwingSet && yarn ${{ steps.vars.outputs.test }} 'test/**/test-[E-Ie-i]*.js'
      - name: yarn test (xsnap)
        run: cd packages/xsnap && yarn ${{ steps.vars.outputs.test }}
      # explicitly test the XS worker, for visibility
      - name: yarn test (SwingSet XS Worker)
        if: matrix.engine != 'xs'
        run: cd packages/SwingSet && yarn test:xs-worker

  test-swingset3:
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        engine: ['14.x', '16.x', 'xs']
    steps:
      - name: set vars
        id: vars
        run: |
          echo ::set-output name=node-version::${{ matrix.engine == 'xs' && '14.x' || matrix.engine }}
          echo ::set-output name=test::${{ matrix.engine == 'xs' && 'test:xs' || 'test' }}
      - uses: actions/checkout@v2
      - uses: ./.github/actions/restore-node
        with:
          node-version: ${{ steps.vars.outputs.node-version }}
      # END-TEST-BOILERPLATE
      - name: yarn test (SwingSet)
        run: cd packages/SwingSet && yarn ${{ steps.vars.outputs.test }} 'test/**/test-[J-Rj-r]*.js'

  test-swingset4:
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        engine: ['14.x', '16.x', 'xs']
    steps:
      - name: set vars
        id: vars
        run: |
          echo ::set-output name=node-version::${{ matrix.engine == 'xs' && '14.x' || matrix.engine }}
          echo ::set-output name=test::${{ matrix.engine == 'xs' && 'test:xs' || 'test' }}
      - uses: actions/checkout@v2
      - uses: ./.github/actions/restore-node
        with:
          node-version: ${{ steps.vars.outputs.node-version }}
      # END-TEST-BOILERPLATE

      - name: yarn test (SwingSet)
        run: cd packages/SwingSet && yarn ${{ steps.vars.outputs.test }} 'test/**/test-[S-Zs-z0-9]*.js'

  test-zoe-unit:
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        engine: ['14.x', '16.x', 'xs']
    steps:
      - name: set vars
        id: vars
        # END-TEST-BOILERPLATE
        run: |
          echo ::set-output name=node-version::${{ matrix.engine == 'xs' && '14.x' || matrix.engine }}
          echo ::set-output name=test::${{ matrix.engine == 'xs' && 'test:xs-unit' || 'test:unit' }}
        # BEGIN-TEST-BOILERPLATE
      - uses: actions/checkout@v2
      - uses: ./.github/actions/restore-node
        with:
          node-version: ${{ steps.vars.outputs.node-version }}
      # END-TEST-BOILERPLATE
      - name: yarn test (zoe)
        timeout-minutes: 30
        run: cd packages/zoe && yarn ${{ steps.vars.outputs.test }}

  test-zoe-swingset:
    # BEGIN-TEST-BOILERPLATE
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        engine: ['14.x', '16.x', 'xs']
    steps:
      - name: set vars
        id: vars
        # END-TEST-BOILERPLATE
        run: |
          echo ::set-output name=node-version::${{ matrix.engine == 'xs' && '14.x' || matrix.engine }}
          echo ::set-output name=test::${{ matrix.engine == 'xs' && 'test:xs-worker' || 'test:swingset' }}
        # BEGIN-TEST-BOILERPLATE
      - uses: actions/checkout@v2
      - uses: ./.github/actions/restore-node
        with:
          node-version: ${{ steps.vars.outputs.node-version }}
      # END-TEST-BOILERPLATE
      - name: yarn test (zoe)
        timeout-minutes: 30
        run: cd packages/zoe && yarn ${{ steps.vars.outputs.test }}
